config:
  target: "http://localhost:8000" # Base URL of your FastAPI app
  phases:
    - duration: 120       # Test duration in seconds
      arrivalRate: 20     # Start with 20 users per second
      rampTo: 50          # Gradually increase to 50 users per second
  http:
    timeout: 10           # Timeout in seconds
    headers:
      Content-Type: "application/json"

scenarios:
  - name: "Category Endpoints"
    flow:
      - post:
          url: "/categories"
          json:
            name: "Category {{ $randomString(5) }}"
          capture:
            - json: "$.id"
              as: categoryId
          validate:
            - statusCode: 200
      - get:
          url: "/categories"
          validate:
            - statusCode: 200
      - delete:
          url: "/categories/{{ categoryId }}"
          validate:
            - statusCode: 200
  - name: Order Report Test
    flow:
      # Step 1: Create a customer
      - post:
          url: "/customers"
          json:
            name: "Customer {{ $randomString(8) }}"
            email: "customer{{ $randomNumber(100, 999) }}@example.com"
            phone: "5551234{{ $randomNumber(1000, 9999) }}"
          capture:
            - json: "$.id"
              as: customerId
          validate:
            - statusCode: 200

      # Step 2: Create a category
      - post:
          url: "/categories"
          json:
            name: "Category {{ $randomString(5) }}"
          capture:
            - json: "$.id"
              as: categoryId
          validate:
            - statusCode: 200

      # Step 3: Create a product
      - post:
          url: "/products"
          json:
            name: "Product {{ $randomString(6) }}"
            description: "Product description {{ $randomString(6) }}"
            price: "{{ $randomNumber(20, 100) }}"
            stock: "{{ $randomNumber(50, 200) }}"
            category_id: "{{ categoryId }}"
          capture:
            - json: "$.id"
              as: productId
          validate:
            - statusCode: 200

      # Step 4: Create an order for the customer
      - post:
          url: "/orders"
          json:
            customer_id: "{{ customerId }}"
            items:
              - product_id: "{{ productId }}"
                quantity: "{{ $randomNumber(1, 5) }}"
                price: "{{ $randomNumber(20, 50) }}"
          validate:
            - statusCode: 200

      # Step 5: Generate order report for the customer
      - get:
          url: "/orders/report/{{ customerId }}"
          validate:
            - statusCode: 200
            - contains: "orders"
  - name: "Product CRUD Test"
    flow:
      # Step 1: Create a product
      - post:
          url: "/products"
          json:
            name: "Test Product {{ $randomString(6) }}"
            description: "This is a test product"
            price: 100.99
            stock: 50
            category_id: "{{ categoryId }}"
          capture:
            - json: "$.id" # Capture the created product ID
              as: productId
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 2: Fetch all products
      - get:
          url: "/products"
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 3: Fetch the created product by ID
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 4: Update the created product
      - put:
          url: "/products/{{ productId }}"
          json:
            name: "Updated Test Product"
            description: "This is an updated test product"
            price: 120.49
            stock: 45
            category_id: "{{ categoryId }}"
          validate:
            - statusCode: 200
            - contains: "Updated Test Product"

      # Step 5: Fetch the updated product
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "Updated Test Product"

      # Step 6: Delete the product
      - delete:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "deleted"

      # Step 7: Validate product deletion
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 404
            - contains: "Product not found"

  - name: "Customer Endpoints"
    flow:
      - post:
          url: "/customers"
          json:
            name: "Customer {{ $randomString(8) }}"
            email: "customer{{ $randomNumber(100, 999) }}@example.com"
            phone: "5551234{{ $randomNumber(1000, 9999) }}"
          capture:
            - json: "$.id"
              as: customerId
          validate:
            - statusCode: 200
      - get:
          url: "/customers"
          validate:
            - statusCode: 200
      - delete:
          url: "/customers/{{ customerId }}"
          validate:
            - statusCode: 200

  - name: "Product CRUD Test"
    flow:
      # Step 1: Create a product
      - post:
          url: "/products"
          json:
            name: "Test Product"
            description: "This is a test product"
            price: 100.99
            stock: 50
            category_id: 1
          capture:
            - json: "$.id" # Capture the created product ID
              as: productId
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 2: Fetch all products
      - get:
          url: "/products"
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 3: Fetch the created product by ID
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "Test Product"

      # Step 4: Update the created product
      - put:
          url: "/products/{{ productId }}"
          json:
            name: "Updated Test Product"
            description: "This is an updated test product"
            price: 120.49
            stock: 45
            category_id: 1
          validate:
            - statusCode: 200
            - contains: "Updated Test Product"

      # Step 5: Fetch the updated product
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "Updated Test Product"

      # Step 6: Delete the product
      - delete:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 200
            - contains: "deleted"

      # Step 7: Validate product deletion
      - get:
          url: "/products/{{ productId }}"
          validate:
            - statusCode: 404
            - contains: "Product not found"

  - name: Bulk Order Test
    flow:
      # Step 1: Create categories, products, and customers to prepare for bulk orders
      - post:
          url: "/categories"
          json:
            name: "Category {{ $randomString(5) }}"
          capture:
            - json: "$.id"
              as: categoryId
      - post:
          url: "/products"
          json:
            name: "Product {{ $randomString(6) }}"
            description: "Product description {{ $randomString(6) }}"
            price: "{{ $randomNumber(20, 100) }}"
            stock: "{{ $randomNumber(50, 200) }}"
            category_id: "{{ categoryId }}"
          capture:
            - json: "$.id"
              as: productId
      - post:
          url: "/customers"
          json:
            name: "Customer {{ $randomString(8) }}"
            email: "customer{{ $randomNumber(1000, 9999) }}@example.com"
            phone: "5551234{{ $randomNumber(1000, 9999) }}"
          capture:
            - json: "$.id"
              as: customerId

      # Step 2: Submit bulk orders
      - post:
          url: "/orders/bulk"
          json:
            orders:
              - customer_id: "{{ customerId }}"
                items:
                  - product_id: "{{ productId }}"
                    quantity: "{{ $randomNumber(1, 5) }}"
                    price: "{{ $randomNumber(20, 50) }}"
              - customer_id: "{{ customerId }}"
                items:
                  - product_id: "{{ productId }}"
                    quantity: "{{ $randomNumber(2, 10) }}"
                    price: "{{ $randomNumber(30, 100) }}"
          validate:
            - statusCode: 200
            - contains: "order_id"
